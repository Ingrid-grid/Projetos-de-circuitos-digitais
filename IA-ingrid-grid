import tensorflow as tf

from matplotlib import pyplot as plt

import numpy as np
-------------------------------------------------------------------
from keras.datasets import mnist

objects=mnist

(train_img,train_lab),(test_img,test_lab)=objects.load_data()
--------------------------------------------------------------------
for i in range(20):
  plt.subplot (4,5,i+1)
  plt.imshow(train_img[i],cmap='gray_r')
  plt.title("Digit : {}".format(train_lab[i]))
  plt.subplots_adjust(hspace=0.5)
  plt.axis('off')
  ------------------------------------------------------------------
  print('Training images shape : ',train_img.shape)

print('Testing images shape : ',test_img.shape)
--------------------------------------------------------------------
print('Como a imagem se parece... ')

print(train_img[0])print('Como a imagem se parece... ')

print(train_img[0])
-------------------------------------------------------------------
plt.hist(train_img[0].reshape(784),facecolor='orange')
plt.title('Pixel em comparação a sua intensidade',fontsize=16)
plt.ylabel('PIXEL')
plt.xlabel('Intensidade')
-------------------------------------------------------------------
train_img=train_img/255.0
test_img=test_img/255.0
-------------------------------------------------------------------
##Aqui podemos criar 3 modelos no Keras, usando o modelo sequencial
from keras.models import Sequential
from keras.layers import Flatten,Dense
model=Sequential()
input_layer= Flatten(input_shape=(28,28))
model.add(input_layer)
hidden_layer1=Dense(512,activation='relu')
model.add(hidden_layer1)
hidden_layer2=Dense(512,activation='relu')
model.add(hidden_layer2)
output_layer=Dense(10,activation='softmax')
model.add(output_layer)
-------------------------------------------------------------------
model.compile(optimizer = 'adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])
-------------------------------------------------------------------
model.fit(train_img,train_lab,epochs=100)
-------------------------------------------------------------------
loss_and_acc=model.evaluate(test_img,test_lab,verbose=2)
print("Test Loss", loss_and_acc[0])
print("Test Accuracy", loss_and_acc[1])
-------------------------------------------------------------------
plt.imshow(test_img[0],cmap='gray_r')
plt.title('Actual Value: {}'.format(test_lab[0]))
prediction=model.predict(test_img)
plt.axis('off')
print('Predicted Value: ',np.argmax(prediction[0]))
if(test_lab[0]==(np.argmax(prediction[0]))):
  print('Successful prediction')
else:
  print('Unsuccessful prediction')
  -----------------------------------------------------------------
  from keras.models import load_model
model.save('modelo.h5')
model=load_model('modelo.h5')
-------------------------------------------------------------------
def load_image(filmename):
  img = load_img(filename, grayscale=True, 
               target_size=(28, 28))
  img = img_to_array(img)
  img = img.reshape(1, 28, 28)
  img = img.astype('float32')
  img = img / 255.0
  return img
  -----------------------------------------------------------------
  from google.colab import files
uploaded = files.upload()
-------------------------------------------------------------------
## A imagem sera retirada dos arquivos do seu computador e assim vc
fara um uploud
from IPython.display import Image
##imagem do uploud tem que estar em png
Image('capitura.png')
-------------------------------------------------------------------
model=tf.keras.models.load_model('modelo.h5')
